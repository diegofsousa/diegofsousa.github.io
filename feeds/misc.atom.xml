<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Diego Fernando - misc</title><link href="https://diegofernando.dev/" rel="alternate"></link><link href="https://diegofernando.dev/feeds/misc.atom.xml" rel="self"></link><id>https://diegofernando.dev/</id><updated>2022-10-09T21:41:31-03:00</updated><subtitle>I'm a technology enthusiast and programmer</subtitle><entry><title>[PT] Entendendo o package Context em Go</title><link href="https://diegofernando.dev/entendendo-o-package-context-em-go.html" rel="alternate"></link><published>2022-10-09T10:05:00-03:00</published><updated>2022-10-09T21:41:31-03:00</updated><author><name>diego</name></author><id>tag:diegofernando.dev,2022-10-09:/entendendo-o-package-context-em-go.html</id><summary type="html">&lt;p&gt;Nos últimos meses tenho voltado meus esforços para o estudo da linguagem Go. Confesso que não é meu primeiro contato com a linguagem – lá em 2017 tive a oportunidade de apresentar um minicurso introdutório em um simpósio universitário. Apesar de não ser uma novidade, precisei revisitar alguns conceitos. O pacote …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nos últimos meses tenho voltado meus esforços para o estudo da linguagem Go. Confesso que não é meu primeiro contato com a linguagem – lá em 2017 tive a oportunidade de apresentar um minicurso introdutório em um simpósio universitário. Apesar de não ser uma novidade, precisei revisitar alguns conceitos. O pacote &lt;strong&gt;context.Context&lt;/strong&gt; é um deles. Então, let's go!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dwight Schrute mandando um &amp;quot;let's go!&amp;quot;" src="/assets/images/lets-go-dwight-schrute.gif"&gt;&lt;/p&gt;
&lt;p&gt;Olhando para a &lt;a href="https://pkg.go.dev/context"&gt;documentação oficial&lt;/a&gt;, temos o seguinte trecho:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;strong&gt;&lt;em&gt;Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes&lt;/em&gt;&lt;/strong&gt;”. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ou seja, o Context permite a criação de prazos e valores de escopo de execução aos processos em que ele é compartilhado. Essa mágica acontece pelo fato que o Context usa &lt;em&gt;channels&lt;/em&gt; para enviar sinais aos processos, e esses processos por sua vez, escutam essas instruções controlando ações de parada.&lt;/p&gt;
&lt;p&gt;Um exemplo clássico de seu uso é em situações de requisições para API’s externas onde queremos delimitar um tempo de espera pela resposta. Também existem outras situações que podemos nos beneficiar do seu uso, tais como controlar o tempo limite de processamento de instruções e determinar prazo de execução de &lt;em&gt;query&lt;/em&gt; ao banco de dados, por exemplo. Enfim, são várias as possibilidades.&lt;/p&gt;
&lt;h1&gt;Iniciando um Context&lt;/h1&gt;
&lt;p&gt;Antes de começarmos a detalhar os tipos de Context, é importante entendermos como se dá a sua inicialização. &lt;strong&gt;Todo Context para ser usado, deve ser inicializado vazio em algum momento do ciclo de vida&lt;/strong&gt;. A própria documentação do Go desencoraja passar &lt;code&gt;nil&lt;/code&gt; como parâmetro em situações que o requerem. Existem duas formas de inicializá-lo - &lt;strong&gt;context.Background()&lt;/strong&gt; e  &lt;strong&gt;context.TODO()&lt;/strong&gt;:&lt;/p&gt;
&lt;h3&gt;context.Background()&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;O &lt;code&gt;context.Backgroud()&lt;/code&gt; nos retorna um Context não nulo e vazio. &lt;strong&gt;Normalmente é usado pela função principal ou &lt;em&gt;entrypoint&lt;/em&gt; do projeto&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;context.TODO()&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Assim como seu antecessor, o &lt;code&gt;context.TODO()&lt;/code&gt; também nos retorna um Context não nulo e vazio. A principal diferença é que o &lt;strong&gt;seu uso se dá quando não estiver claro o contexto que se deve usar ou ele ainda não estiver disponível&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;Tipos de Context&lt;/h1&gt;
&lt;p&gt;Existem basicamente &lt;strong&gt;três tipos&lt;/strong&gt; de Context:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cancellation Signals&lt;/li&gt;
&lt;li&gt;Deadline&lt;/li&gt;
&lt;li&gt;Request-scoped values&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cancellation Signals&lt;/h3&gt;
&lt;p&gt;O tipo &lt;strong&gt;Cancellation Signals&lt;/strong&gt; define um Context que pode ter sua execução interrompida através de um comando. Neste caso, a instrução segue o fluxo normal  até que em certo ponto do código seja dada a sua parada. A seguir, um exemplo de implementação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;executeFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;executeFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stopping code execution...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Running at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Antes de explicar a função &lt;code&gt;main()&lt;/code&gt;, vamos entender primeiro a função &lt;code&gt;executeFunction()&lt;/code&gt;, pois ela irá receber instruções do Context. Ao receber um parâmetro do tipo &lt;code&gt;context.Context&lt;/code&gt; fazemos um &lt;em&gt;loop&lt;/em&gt; infinito, onde, assim que receber o sinal de parada vindo do contexto, ela irá apresentar o texto “&lt;strong&gt;Stopping code execution...&lt;/strong&gt;” e terminará sua execução através de um &lt;code&gt;return&lt;/code&gt; explícito. Caso contrário, seguirá sua execução apresentando “&lt;strong&gt;Running at [horário]&lt;/strong&gt;”. O comando &lt;code&gt;select&lt;/code&gt; funciona como uma espécie de &lt;em&gt;switch-case&lt;/em&gt;, porém aplicado ao sinais provenientes de &lt;strong&gt;&lt;em&gt;channels&lt;/em&gt;&lt;/strong&gt;, como é o caso de Contexts. Como percebemos, o sinal de parada no código é dado pela instrução &lt;code&gt;ctx.Done()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Retornando para a função &lt;code&gt;main()&lt;/code&gt;, a primeira coisa que fazemos é definir um Context através do &lt;code&gt;context.Backgroud()&lt;/code&gt;. Após isso, usamos a função &lt;code&gt;context.WithCancel()&lt;/code&gt; passando o nosso contexto base. Ele nos devolve um novo contexto e uma segunda instrução que chamamos de &lt;code&gt;cancel&lt;/code&gt;. Ela é essencial para definir a parada das instruções que estão ligadas a este contexto. Enquanto executamos a função &lt;code&gt;executeFunction()&lt;/code&gt; de forma assíncrona, esperamos três segundos para forçar seu cancelamento com a instrução &lt;code&gt;cancel()&lt;/code&gt; - aquela mesmo que recebemos do contexto :) . &lt;/p&gt;
&lt;p&gt;O resultado da execução será semelhante ao &lt;em&gt;log&lt;/em&gt; abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Running at 2022-10-09 16:15:46.80042576 -0300 -03 m=+1.000598497
Running at 2022-10-09 16:15:47.801454038 -0300 -03 m=+2.001626779
Running at 2022-10-09 16:15:48.801876258 -0300 -03 m=+3.002048999
Stopping code execution...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Deadline&lt;/h3&gt;
&lt;p&gt;Como o próprio termo sugere, um Context do tipo &lt;strong&gt;Deadline&lt;/strong&gt; delimita o tempo de execução de uma instrução ou processo. Podemos então informar para a aplicação até quando determinado código pode demorar. Temos duas funções diferentes para trabalhar com &lt;strong&gt;Deadline&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;context.WithDeadline()&lt;/code&gt;&lt;/strong&gt; - É definido um &lt;strong&gt;valor de tempo fixo&lt;/strong&gt;.&lt;ul&gt;
&lt;li&gt;Exemplo: o contexto tem até as 22h do dia 09 de outubro de 2022 para ser executado.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;context.WithTimeout()&lt;/code&gt;&lt;/strong&gt; - É definido um &lt;strong&gt;valor de tempo a partir do instante que foi instanciado&lt;/strong&gt;.&lt;ul&gt;
&lt;li&gt;Exemplo: o contexto tem 4 minutos a partir de agora para ser executado.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;context.WithDeadline()&lt;/h4&gt;
&lt;p&gt;Vamos então pegar o mesmo código anterior e alterar alguns trechos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithDeadline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deadline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;executeFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;executeFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stopping code execution...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Running at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instanciamos uma nova variável &lt;code&gt;deadline&lt;/code&gt; somando três segundos ao tempo de agora e passamos ela para a função &lt;code&gt;context.WithDeadLine()&lt;/code&gt;. Dessa forma a instrução da função &lt;code&gt;executeFunction()&lt;/code&gt; será interrompida após o intervalo de três segundos.&lt;/p&gt;
&lt;p&gt;O resultado da execução do código acima será semelhante a seguinte saída:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Running at 2022-10-09 17:30:50.492897161 -0300 -03 m=+1.000190057
Running at 2022-10-09 17:30:51.493583512 -0300 -03 m=+2.000876359
Running at 2022-10-09 17:30:52.493694606 -0300 -03 m=+3.000987449
Running at 2022-10-09 17:30:53.493795753 -0300 -03 m=+4.001088530
Stopping code execution…
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;context.WithTimeout()&lt;/h4&gt;
&lt;p&gt;Podemos usar a função &lt;code&gt;context.WithTimeout()&lt;/code&gt; para produzir o mesmo comportamento. Basta alterarmos as linhas &lt;strong&gt;11&lt;/strong&gt; e &lt;strong&gt;12&lt;/strong&gt; por:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;deadline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Second&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;cancel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deadline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A diferença, para o código anterior é que, agora, não precisamos mais fazer o cálculo do instante atual somado com os três segundos. A saída será a mesma.&lt;/p&gt;
&lt;p&gt;Um ponto curioso nessa estrutura é que executamos também o &lt;code&gt;cancel()&lt;/code&gt;, porém com a palavra-chave &lt;code&gt;defer&lt;/code&gt; para assegurar que ele será a última coisa a ser executada. Apesar de estarmos delimitando o tempo de execução, &lt;strong&gt;podemos também antecipar o cancelamento da instrução a qualquer momento se sobrepondo a regra do limite de tempo&lt;/strong&gt;, assim como explicado na seção &lt;strong&gt;Cancellation Signals&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Request-scoped value&lt;/h4&gt;
&lt;p&gt;Além de controlar tempo de execução e parada, com Context também é possível passar valores no estilo &lt;strong&gt;chave-valor&lt;/strong&gt; para instruções filhas. Esse conceito é importante pois ele &lt;strong&gt;funciona independente se a chamada para as instruções é síncrona ou assíncrona&lt;/strong&gt;. Esses valores ficam salvos dentro do contexto e são imutáveis. Vamos detalhar o código abaixo um modelo síncrono:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sessionId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Session123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;showValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;showValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sessionId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;addKeyValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;typeError&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ErrorType123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;typeError&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addKeyValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Definimos o contexto inicial vazio com &lt;code&gt;context.Background()&lt;/code&gt;. Após isso, criamos um novo contexto a partir do inicial com &lt;code&gt;context.WithValue()&lt;/code&gt; e já também adicionamos valores fictícios ao contexto. Como esses valores ficam guardados no Context, podemos acessá-los em outra parte no programa com a função &lt;code&gt;ctx.Value()&lt;/code&gt; passando a chave correspondente. Caso essa chave não exista o retorno é &lt;code&gt;nil&lt;/code&gt;. Também é possível adicionar novos valores a um contexto criando um &lt;code&gt;context.WithValues()&lt;/code&gt; passando o contexto anterior e atualizando ele próprio.&lt;/p&gt;
&lt;h1&gt;Demais cenários&lt;/h1&gt;
&lt;p&gt;Os casos de uso do Context não se limitam aos aqui apresentados. Atualmente, as bibliotecas em Go, sejam nativas ou não requerem passar Context em suas instruções. O objetivo desse post foi entender a sua base e seus usos comuns.&lt;/p&gt;
&lt;p&gt;Até a próxima :)&lt;/p&gt;
&lt;h4&gt;Referências&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/context"&gt;https://pkg.go.dev/context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-contexts-in-go"&gt;https://www.digitalocean.com/community/tutorials/how-to-use-contexts-in-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://p.agnihotry.com/post/understanding_the_context_package_in_golang/"&gt;https://p.agnihotry.com/post/understanding_the_context_package_in_golang/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eGYZPUoH78c"&gt;https://www.youtube.com/watch?v=eGYZPUoH78c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="golang"></category><category term="context"></category><category term="programação"></category></entry><entry><title>[PT] Construindo uma ferramenta para criação de notas rápidas</title><link href="https://diegofernando.dev/construindo-uma-ferramenta-para-criacao-de-notas-rapidas.html" rel="alternate"></link><published>2021-01-20T01:05:00-03:00</published><updated>2021-08-02T03:46:05-03:00</updated><author><name>diego</name></author><id>tag:diegofernando.dev,2021-01-20:/construindo-uma-ferramenta-para-criacao-de-notas-rapidas.html</id><summary type="html">&lt;p&gt;Em um ambiente de desenvolvimento de software, as pessoas que compõem um time/projeto/&lt;em&gt;squad&lt;/em&gt; tendem a compartilhar dados entre si a todo momento. &lt;em&gt;Logs&lt;/em&gt; de aplicação, trechos de código e macetes muitas vezes extrapolam o limite de caracteres da ferramenta de comunicação, fazendo com que surja a necessidade de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Em um ambiente de desenvolvimento de software, as pessoas que compõem um time/projeto/&lt;em&gt;squad&lt;/em&gt; tendem a compartilhar dados entre si a todo momento. &lt;em&gt;Logs&lt;/em&gt; de aplicação, trechos de código e macetes muitas vezes extrapolam o limite de caracteres da ferramenta de comunicação, fazendo com que surja a necessidade de colar essa informação em uma ferramenta externa.&lt;/p&gt;
&lt;p&gt;Na empresa onde trabalho, por exemplo, usamos com frequência o site &lt;strong&gt;&lt;a href="http://dontpad.com/"&gt;dontpad.com&lt;/a&gt;&lt;/strong&gt;. &lt;strong&gt;Dontpad&lt;/strong&gt; é uma aplicação que possibilita a criação rápida de notas a partir de um recurso definido pelo usuário. Uma sequência de caracteres qualquer após a URL &lt;code&gt;http://dontpad.com&lt;/code&gt;, já torna um identificador para o conteúdo do seu texto. O Dontpad é extramente rápido e eficiente, porém observei alguns contras:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nenhuma privacidade e segurança. Qualquer pessoa que tiver a URL, da sua nota, pode visualizar o conteúdo.&lt;/li&gt;
&lt;li&gt;Nenhuma consistência. Qualquer pessoa que tiver a URL também pode alterar o conteúdo, e até mesmo apagá-lo.&lt;/li&gt;
&lt;li&gt;Não é possível saber quem modificou um arquivo. Tudo é anônimo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Exemplo de uso do Dontpad" src="/assets/images/dontpad-hello.gif"&gt;&lt;em&gt;Criando uma nota pelo Dontpad.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Algo que está se tornando cada vez mais comum no aprendizado e exercício do desenvolvimento de software, nos dias atuais, é a criação de projetos que simulam alguma plataforma de sucesso. Recriar, mesmo que de maneira simplória, réplicas como do UX do Instagram, backend do Uber, arquitetura da Netflix, nos induzem a refletir sobre técnicas que podem usadas nesses cases.&lt;/p&gt;
&lt;p&gt;Dado isso, uni todas as características ruíns do Dontpad, joguei num balde, e me desafiei a refazê-lo com algumas melhorias. Apesar de ser um serviço bem respaldado e com muitos acessos, a ideia por trás do Dontpad não é complexa. O grau de dificuldade inclusive foi maior no conjunto de funcionalidades que adicionei como diferenciais:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A URL de uma nota é &lt;em&gt;hash&lt;/em&gt; (ex: https:///EreQR5z).&lt;/li&gt;
&lt;li&gt;Possibilidade de criar conta para guardar notas.&lt;/li&gt;
&lt;li&gt;Possibilidade de privar notas para o usuário.&lt;/li&gt;
&lt;li&gt;Capacidade de bloquear a alteração do conteúdo de uma nota.&lt;/li&gt;
&lt;li&gt;Capacidade de saber quando uma nota foi criada e a última vez que foi alterada.&lt;/li&gt;
&lt;li&gt;Capacidade de saber quem viu uma nota.&lt;/li&gt;
&lt;li&gt;Pesquisa de notas por fragmento de conteúdo.&lt;/li&gt;
&lt;li&gt;Adaptação para dispositivos móveis (responsivo).&lt;/li&gt;
&lt;li&gt;Modo escuro (&lt;em&gt;dark theme&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Atualmente, tenho voltado os meus esforços para aprendizado e aperfeiçoamento da linguagem Java. Mas, para esse projeto, preferi usar a stack formada pela linguagem &lt;strong&gt;Python&lt;/strong&gt; e o framework &lt;strong&gt;Django&lt;/strong&gt;. Considero como uma das maiores vantagens de usar essa tecnologia, a rapidez em que é possível levantar uma aplicação com várias baterias embutidas, tais como: sistema de autenticação e migração de banco de dados. Como é de costume em projetos que envolvem algum tipo de interface gráfica, começo sempre pelo &lt;em&gt;wireframe&lt;/em&gt;. A imagem abaixo são as ideias iniciais das telas.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Daptnod wireframe" src="/assets/images/daptnot-wireframe.jpeg"&gt;&lt;em&gt;Wireframe desenhado para guiar a construção das telas.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Como até aquele momento às novas funcionalidades da aplicação estavam definidas, já se sabia quais campos eram necessários para formular o domínio principal do sistema: &lt;strong&gt;as notas&lt;/strong&gt;. A tabela denomida para este fim, &lt;code&gt;notes_note&lt;/code&gt;, se relaciona com a tabela de usuários, &lt;code&gt;auth_user&lt;/code&gt;, em dois campos: &lt;code&gt;created_by_id&lt;/code&gt; e &lt;code&gt;updated_by_id&lt;/code&gt;. Uma das funcionalidades consistia em saber quais pessoas visualizaram uma nota, para isso foi preciso fazer uma relação &lt;em&gt;ManyToMany&lt;/em&gt; através da tabela &lt;code&gt;notes-note-viewers&lt;/code&gt;, como sugere a imagem a seguir.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Daptnod modelagem" src="/assets/images/modelagem-daptnod.jpeg"&gt;&lt;em&gt;Relação entre os modelos de Notas e Usuários.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Depois de criado o modelo, o resto do tempo foi investido para construir o &lt;em&gt;frontend&lt;/em&gt; e otimizar consultas. Destaco aqui uma ferramenta que ajuda bastante nesse último ponto, que é o &lt;a href="https://django-debug-toolbar.readthedocs.io/en/latest/"&gt;Django Debug Toolbar&lt;/a&gt;. Essa dependência, quando configurada e habilitada, possibilita fazer um "raio X" do que acontece quando uma requisição chega até o servidor. Alguns exemplos de otimizações que foram feitas usando o ORM que o próprio Django fornece, foram:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Antes &lt;/span&gt;
&lt;span class="n"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;views_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;views_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="c1"&gt;# Depois &lt;/span&gt;
&lt;span class="n"&gt;Note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;views_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;views_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Antes&lt;/span&gt;
&lt;span class="n"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="c1"&gt;# Depois&lt;/span&gt;
&lt;span class="n"&gt;Note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;updated_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As telas foram feitas com o framework CSS &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;. A intenção foi deixá-las o mais simples possível, sem truques nem efeitos. Mesmo focando no básico, sentia falta do "modo escuro" que não existia no Dontpad. Não é tão simples fazer isso com o Bulma, mas encontrei uma extensão que facilitou o desenvolvimento desse recurso: &lt;a href="https://github.com/jloh/bulma-prefers-dark"&gt;bulma-prefers-dark&lt;/a&gt;. Ao final da construção, a navegação ficou assim:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Daptnod modelagem" src="/assets/images/tuor-daptnod.gif"&gt;&lt;em&gt;Tuor pelo Daptnod.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Apesar de ser algo simples, este foi um dos projetos que mais gostei de fazer por ser muito útil. O tempo de desenvolvimento da aplicação foi de aproximadamente duas semanas. Oficializei uma primeira versão da ferramenta e a batizei como &lt;strong&gt;DAPTNOD&lt;/strong&gt;. O projeto está no GitHub através deste &lt;a href="https://github.com/diegofsousa/daptnod"&gt;link&lt;/a&gt;. Também subi uma versão de produção que pode ser acessada em &lt;a href="https://daptnod.herokuapp.com/"&gt;https://daptnod.herokuapp.com/&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="ferramental"></category><category term="python"></category><category term="recriação"></category><category term="dontpad"></category></entry><entry><title>[PT] Padrão Abstract Factory aplicado à diferentes implementações de redimensionamento de imagens</title><link href="https://diegofernando.dev/padrao-abstract-factory-aplicado-a-redimensionamento-de-imagens.html" rel="alternate"></link><published>2020-09-20T18:42:00-03:00</published><updated>2021-08-02T00:41:02-03:00</updated><author><name>diego</name></author><id>tag:diegofernando.dev,2020-09-20:/padrao-abstract-factory-aplicado-a-redimensionamento-de-imagens.html</id><summary type="html">&lt;p&gt;O &lt;strong&gt;Abstract Factory&lt;/strong&gt; é um importante padrão de projeto do tipo criacional que permite criar famílias de objetos relacionados sem precisar especificar as classes concretas. Este padrão é o primeiro descrito no livro Design Patterns do &lt;strong&gt;GoF&lt;/strong&gt;. Conhecer a intuito por trás da criação desses padrões é bastante válido para …&lt;/p&gt;</summary><content type="html">&lt;p&gt;O &lt;strong&gt;Abstract Factory&lt;/strong&gt; é um importante padrão de projeto do tipo criacional que permite criar famílias de objetos relacionados sem precisar especificar as classes concretas. Este padrão é o primeiro descrito no livro Design Patterns do &lt;strong&gt;GoF&lt;/strong&gt;. Conhecer a intuito por trás da criação desses padrões é bastante válido para entender os designs de software mais atuais.&lt;/p&gt;
&lt;p&gt;Os objetos ou produtos do problema de design que iremos abordar neste estudo, são três tipos de redimensionamento de imagens. Nas duas primeiras, usaremos a biblioteca nativa &lt;strong&gt;AWT&lt;/strong&gt; com sua implementação mais comum. Já na última, usaremos uma abordagem com &lt;code&gt;getScaledInstance&lt;/code&gt;, da mesma biblioteca. A seguir, um resumo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ImageGraphics2D&lt;/strong&gt;: Uma implementação mais comum usando recursos do AWT. Coletamos uma imagem de entrada, e geramos uma imagem de saída.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageGraphics2DWithRendering&lt;/strong&gt;: A mesma estratégia da implementação anterior, porém usamos uma abordagem de renderização com interpolação bilinear.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageScaledInstance&lt;/strong&gt;: Usando o método &lt;code&gt;getScaledInstance&lt;/code&gt; ao invés da implementação tradicional da biblioteca.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dessa forma, temos como atributos variáveis entre a família de objetos: a imagem, a largura alvo e a altura alvo. Esses valores podem ser passados onde toda estrutura é chamada. Nesse caso, como é um exemplo, podemos interagir com a fábrica pelo método main. Não especificarei os detalhes de construção de todas as classes, mas deixarei o link da implementação no GitHub. O diagrama de classes aplicado à temática proposta fica assim:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Banner de divulgação" src="/assets/images/abstract-factory-diagram.jpeg"&gt;&lt;em&gt;Diagrama de Classe do padrão Abstract Factory aplicado.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As chamadas do método main para a implementação podem ser desenvolvidas da seguinte maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dev.diegofernando.imagetest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dev.diegofernando.imagetest.factory.ConcreteImageFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dev.diegofernando.imagetest.factory.Image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dev.diegofernando.imagetest.factory.ImageFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;dev.diegofernando.imagetest.util.ImageResourceUtil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;java.awt.image.BufferedImage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * @author Diego Fernando&lt;/span&gt;
&lt;span class="cm"&gt; * @since 07/09/2020&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;BufferedImage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageResourceUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getImageFromPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ImageFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;imageFactory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConcreteImageFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;graphics2dImage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;imageFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resizeWithGraphics2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scaledInstanceImage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;imageFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resizeWithScaledInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;graphics2dRenderedImage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;imageFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resizeWithGraphics2DRendered&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;graphics2dImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;scaledInstanceImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;graphics2dRenderedImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Essa abordagem tem alguns prós e contras. O benefício de implementar essa estrutura é a certeza que todos os produtos que vêm da fábrica estão relacionados e são compatíveis entre si. Com o baixo acoplamento, fica fácil introduzir novas variações no produto sem interferir no código do cliente tornando a manutenção facilitada. O ponto ruim da abordagem é a quantidade de código incluindo novas classes e interfaces, o que pode confundir o desenvolvedor no início.&lt;/p&gt;</content><category term="misc"></category><category term="design pattern"></category><category term="java"></category><category term="gof"></category><category term="padrão"></category><category term="abstract fatory"></category></entry><entry><title>[PT] Podcast - Trabalho colaborativo e Git</title><link href="https://diegofernando.dev/podcast-trabalho-colaborativo-e-git.html" rel="alternate"></link><published>2020-09-20T18:42:00-03:00</published><updated>2021-08-02T00:41:02-03:00</updated><author><name>diego</name></author><id>tag:diegofernando.dev,2020-09-20:/podcast-trabalho-colaborativo-e-git.html</id><summary type="html">&lt;p&gt;Nos últimos dias fui convidado para uma conversa sobre ferramentas de &lt;strong&gt;trabalho colaborativo&lt;/strong&gt;, em 
especial, o &lt;strong&gt;Git&lt;/strong&gt;. O bate-papo sobre o tema envolveu, além de mim, o &lt;a href="https://www.linkedin.com/in/ACoAACYW_j0B2t22g9xa_rx9_mMXW5CsfCw7A9c?lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3B2EjYPz%2FcRv2JG0N8UcP6uA%3D%3D"&gt;Davi Luis&lt;/a&gt; (analista de sistemas da Locaweb) e o &lt;a href="https://www.linkedin.com/in/ACoAAAlEAeIBHNKFP36CMmao78tv2CJCXRWOz54?lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3B2EjYPz%2FcRv2JG0N8UcP6uA%3D%3D"&gt;Jesiel Viana&lt;/a&gt; (professor do IFPI, campus Picos). A conversa foi ao ar pelo projeto …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nos últimos dias fui convidado para uma conversa sobre ferramentas de &lt;strong&gt;trabalho colaborativo&lt;/strong&gt;, em 
especial, o &lt;strong&gt;Git&lt;/strong&gt;. O bate-papo sobre o tema envolveu, além de mim, o &lt;a href="https://www.linkedin.com/in/ACoAACYW_j0B2t22g9xa_rx9_mMXW5CsfCw7A9c?lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3B2EjYPz%2FcRv2JG0N8UcP6uA%3D%3D"&gt;Davi Luis&lt;/a&gt; (analista de sistemas da Locaweb) e o &lt;a href="https://www.linkedin.com/in/ACoAAAlEAeIBHNKFP36CMmao78tv2CJCXRWOz54?lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3B2EjYPz%2FcRv2JG0N8UcP6uA%3D%3D"&gt;Jesiel Viana&lt;/a&gt; (professor do IFPI, campus Picos). A conversa foi ao ar pelo projeto &lt;strong&gt;B-a-Bá do Dev&lt;/strong&gt;, uma iniciativa liderada pelo professor Jesiel em formato de podcast que aborda temas relacionados ao desenvolvimento de software. O intuito principal é desmistificar os termos do desenvolvimento web para iniciantes da área.&lt;/p&gt;
&lt;iframe src="https://open.spotify.com/embed-podcast/episode/28lVsU2OqtkdwmijazZdYt" width="100%" height="232" frameborder="0" allowtransparency="true" allow="encrypted-media"&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;[0:05] - Apresentação&lt;/li&gt;
&lt;li&gt;[1:21] - Apresentação Diego&lt;/li&gt;
&lt;li&gt;[2:45] - Apresentação Davi&lt;/li&gt;
&lt;li&gt;[10:18] - O que é &lt;strong&gt;controle de versão&lt;/strong&gt;? Quais as diferenças entre &lt;strong&gt;Git&lt;/strong&gt;, &lt;strong&gt;GitHub&lt;/strong&gt; e &lt;strong&gt;Gitlab&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;[22:25] - O que é um &lt;strong&gt;conflito&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;[26:15] - Como evitar um &lt;strong&gt;conflito&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;[30:25] - Linha de comando vs. Interface gráfica&lt;/li&gt;
&lt;li&gt;[34:40] - &lt;strong&gt;GitFlow&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;[40:15] - &lt;strong&gt;Branchs&lt;/strong&gt; e &lt;strong&gt;tags&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;[42:20] - Recomendações para aprender Git&lt;/li&gt;
&lt;li&gt;[49:50] - Considerações finais&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="trabalho colaborativo"></category><category term="git"></category><category term="github"></category><category term="spotify"></category><category term="podcast"></category></entry><entry><title>[PT] Podcast aula - Scala e microserviços</title><link href="https://diegofernando.dev/podcast-aula-scala-microservicos.html" rel="alternate"></link><published>2020-05-24T01:47:00-03:00</published><updated>2021-08-02T00:41:02-03:00</updated><author><name>diego</name></author><id>tag:diegofernando.dev,2020-05-24:/podcast-aula-scala-microservicos.html</id><summary type="html">&lt;p&gt;Atualmente o mundo passa por uma pandemia provocada pelo novo coronavírus, ou covid-19. Diante da situação, o melhor que podemos fazer é ficar em casa para que o cenário não se agrave ainda mais. Em virtude da circunstância, os amigos do &lt;strong&gt;DevCapivara&lt;/strong&gt; tiveram a brilhante ideia de fazer um podcast …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Atualmente o mundo passa por uma pandemia provocada pelo novo coronavírus, ou covid-19. Diante da situação, o melhor que podemos fazer é ficar em casa para que o cenário não se agrave ainda mais. Em virtude da circunstância, os amigos do &lt;strong&gt;DevCapivara&lt;/strong&gt; tiveram a brilhante ideia de fazer um podcast/aula com bastante conteúdo legal durante duas semanas.&lt;/p&gt;
&lt;p&gt;Entre os dias 22 de março e 04 de abril o podcast abordou conteúdos sobre &lt;strong&gt;NodeJS&lt;/strong&gt;, &lt;strong&gt;microserviços&lt;/strong&gt;, &lt;strong&gt;Scala&lt;/strong&gt;, &lt;strong&gt;Clojure&lt;/strong&gt;, &lt;strong&gt;testes de software&lt;/strong&gt;, &lt;strong&gt;programação funcional&lt;/strong&gt;, &lt;strong&gt;Deep Learning&lt;/strong&gt;, &lt;strong&gt;Django Rest Framework&lt;/strong&gt;, &lt;strong&gt;CI/CD&lt;/strong&gt;, &lt;strong&gt;React Native&lt;/strong&gt;, &lt;strong&gt;sistemas de autenticação&lt;/strong&gt;, &lt;strong&gt;Unity e Blender&lt;/strong&gt;, &lt;strong&gt;mercado/inovação&lt;/strong&gt; e &lt;strong&gt;Sinatra&lt;/strong&gt;. Todos os detalhes estão no &lt;a href="https://devcapivara.com.br"&gt;site&lt;/a&gt; do projeto.&lt;/p&gt;
&lt;p&gt;No meu podcast/aula falei um pouco sobre a linguagem &lt;strong&gt;Scala&lt;/strong&gt; e seu uso no mundo web. Também fizemos um bate-papo bastante contribuinte sobre microserviços. Trouxe dois exemplos de aplicação usando os frameworks &lt;a href="https://www.playframework.com/"&gt;Play&lt;/a&gt; e &lt;a href="https://www.lagomframework.com/"&gt;Lagom&lt;/a&gt;. Este último com várias "baterias embutidas" para criação de microserviços. Confira a seguir, na íntegra:&lt;/p&gt;
&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class='embed-container'&gt;&lt;iframe src='https://www.youtube.com/embed/SR_DFsclZkw' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Aula na íntegra&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Banner de divulgação" src="/assets/images/scala-podcast.jpeg"&gt;&lt;em&gt;Banner de divulgação.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;O repositório com o código da aula está no &lt;strong&gt;Github&lt;/strong&gt;, neste &lt;a href="https://github.com/diegofsousa/devcapivara-microservice"&gt;link&lt;/a&gt;. Agredeço a oportunidade ao pessoal do DevCapivara e parabenizo pela atitude. Já esperando o próximo evento :).&lt;/p&gt;</content><category term="misc"></category><category term="programação"></category><category term="scala"></category><category term="microserviços"></category><category term="lagom"></category><category term="aula"></category><category term="podcast"></category></entry><entry><title>[PT] Adicionando Eclipse Spring Tools 4 ao lançador do Ubuntu</title><link href="https://diegofernando.dev/adicionando-eclipse-spring-tools-4-lancador-ubuntu.html" rel="alternate"></link><published>2020-05-16T23:54:00-03:00</published><updated>2021-08-02T01:49:08-03:00</updated><author><name>diego</name></author><id>tag:diegofernando.dev,2020-05-16:/adicionando-eclipse-spring-tools-4-lancador-ubuntu.html</id><summary type="html">&lt;p&gt;Uma das mais famosas IDE's (&lt;em&gt;Integrated Development Environment&lt;/em&gt;) para a criação de programas em Java é o &lt;strong&gt;Eclipse&lt;/strong&gt;. O seu uso simples torna o desenvolvimento bastante produtivo. Já o &lt;strong&gt;Spring Tools 4&lt;/strong&gt; (ou simplemente &lt;strong&gt;STS&lt;/strong&gt;) é basicamente um &lt;em&gt;plugin&lt;/em&gt; criado exclusivamente para o framework &lt;em&gt;web&lt;/em&gt; Java &lt;strong&gt;Spring&lt;/strong&gt; que tem suporte …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Uma das mais famosas IDE's (&lt;em&gt;Integrated Development Environment&lt;/em&gt;) para a criação de programas em Java é o &lt;strong&gt;Eclipse&lt;/strong&gt;. O seu uso simples torna o desenvolvimento bastante produtivo. Já o &lt;strong&gt;Spring Tools 4&lt;/strong&gt; (ou simplemente &lt;strong&gt;STS&lt;/strong&gt;) é basicamente um &lt;em&gt;plugin&lt;/em&gt; criado exclusivamente para o framework &lt;em&gt;web&lt;/em&gt; Java &lt;strong&gt;Spring&lt;/strong&gt; que tem suporte para o ambientes &lt;strong&gt;Eclipse&lt;/strong&gt;, &lt;strong&gt;Visual Studio Code&lt;/strong&gt; e &lt;strong&gt;Theia&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Mesmo sendo um &lt;em&gt;plugin&lt;/em&gt;, ao efetuar o &lt;em&gt;download&lt;/em&gt; do STS, estamos também baixando o Eclipse, pois o STS funciona como uma extensão dessa IDE. A maneira mais básica de começar a utilizar o STS no ambiente Linux é baixá-la diretamente do &lt;a href="https://spring.io/tools"&gt;site oficial&lt;/a&gt; e rodar o arquivo executável. Veja o GIF a seguir.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Inicialização manual STS" src="/assets/images/sts-manual.gif"&gt;&lt;em&gt;Inicialização manual do STS.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Essa tarefa começa a ficar incômoda quando toda vez temos que abrir um diretório e ter que rodar. Os perfeccionistas (como eu) acabam achando essa uma abordagem ruim. Nos próximos passos iremos ver como inserir o &lt;em&gt;software&lt;/em&gt; no lançador (&lt;em&gt;launch&lt;/em&gt;) e ainda como configurar para deixá-lo nos favoritos.&lt;/p&gt;
&lt;h2&gt;Mão na massa&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ &lt;em&gt;Disclaimer&lt;/em&gt;: Esse procedimento foi testado com o STS na versão &lt;code&gt;4.6.1&lt;/code&gt; e o Ubuntu na versão &lt;code&gt;18.04&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O primeiro passo é mover a pasta extraída do download para o diretório &lt;code&gt;/opt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo mv &amp;lt;diretorio-sts&amp;gt; /opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Certo, vamos então criar um ícone para o lançador. Todos o ícones de &lt;em&gt;softwares&lt;/em&gt; instalados no Ubuntu 18.04 ficam em &lt;code&gt;/usr/share/applications&lt;/code&gt;. Entre nesse diretório e crie um arquivo &lt;code&gt;"sts.desktop"&lt;/code&gt; com o seguinte conteúdo:&lt;/p&gt;
&lt;p&gt;Arquivo &lt;code&gt;"sts.desktop"&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;Desktop Entry&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Application
&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sts
&lt;span class="nv"&gt;Comment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Spring Tool Suite
&lt;span class="nv"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/&amp;lt;diretorio-sts&amp;gt;/icon.xpm
&lt;span class="nv"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/&amp;lt;diretorio-sts&amp;gt;/SpringToolSuite4
&lt;span class="nv"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;Categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Development&lt;span class="p"&gt;;&lt;/span&gt;IDE&lt;span class="p"&gt;;&lt;/span&gt;Java&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Substitua &lt;code&gt;&amp;lt;diretorio-sts&amp;gt;&lt;/code&gt; pela pasta que você nomeou dentro de &lt;code&gt;/opt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se tudo tiver corrido bem, já podemos encontrar o STS entre os ícones do lançador. &lt;/p&gt;
&lt;p&gt;Esse processo funciona até o momento em que adicionamos o ícone a barra de favoritos. Até conseguimos inseri-lo na barra, mas ao executar notamos que ele duplica o ícone:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Inicialização com ícone duplicado" src="/assets/images/sts-duplicated.jpeg"&gt;&lt;em&gt;Inicialização com ícone duplicado.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Para corrigir esse &lt;em&gt;bug&lt;/em&gt;, voltamos ao diretório &lt;code&gt;/usr/share/applications&lt;/code&gt; para editar o nosso 
&lt;code&gt;"sts.desktop"&lt;/code&gt;. Iremos adicionar a linha &lt;code&gt;StartupWMClass=Spring Tool Suite 4&lt;/code&gt; ao arquivo. O valor &lt;strong&gt;Spring Tool Suite 4&lt;/strong&gt; deve ser exatamente igual ao nome do &lt;em&gt;software&lt;/em&gt;. Felizmente existe uma forma de assegurar isso com o comando &lt;code&gt;xprop WM_CLASS&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Adquirindo nome absoluto do software" src="/assets/images/sts-get-name-software.gif"&gt;&lt;em&gt;Adquirindo nome absoluto do software.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dessa forma, o arquivo final &lt;code&gt;"sts.desktop"&lt;/code&gt;  fica:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;Desktop Entry&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Application
&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sts
&lt;span class="nv"&gt;Comment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Spring Tool Suite
&lt;span class="nv"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/&amp;lt;pasta-sts&amp;gt;/icon.xpm
&lt;span class="nv"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/&amp;lt;pasta-sts&amp;gt;/SpringToolSuite4
&lt;span class="nv"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;Categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Development&lt;span class="p"&gt;;&lt;/span&gt;IDE&lt;span class="p"&gt;;&lt;/span&gt;Java&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;StartupWMClass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Spring Tool Suite &lt;span class="m"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ao fazer isso, adicione novamente o ícone aos favoritos e confirme se funcionou. O comportamento deve ser similar ao do exemplo abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img alt="STS disponível no lançador" src="/assets/images/sts-on-launch.gif"&gt;&lt;em&gt;STS disponível no lançador.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Comente se funcionou (ou não) aqui em baixo. :)&lt;/p&gt;</content><category term="misc"></category><category term="programação"></category><category term="java"></category><category term="spring"></category><category term="ide"></category><category term="eclipse"></category></entry><entry><title>[PT] Configurando rotas estáticas em uma rede</title><link href="https://diegofernando.dev/configurando-rotas-estaticas-em-uma-rede.html" rel="alternate"></link><published>2019-09-26T00:45:00-03:00</published><updated>2021-08-02T00:41:02-03:00</updated><author><name>diego</name></author><id>tag:diegofernando.dev,2019-09-26:/configurando-rotas-estaticas-em-uma-rede.html</id><summary type="html">&lt;p&gt;Imagine o seguinte cenário: temos uma tarefas de criar uma comunicação entre duas redes diferentes. Em cada rede existe um roteador na borda e, claramente, devemos implantar um outro roteador que possa interconectar essas duas redes. As redes são:&lt;/p&gt;
&lt;p&gt;router0: 10.10.0.0 /16 /
router2: 10.20.0.0 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Imagine o seguinte cenário: temos uma tarefas de criar uma comunicação entre duas redes diferentes. Em cada rede existe um roteador na borda e, claramente, devemos implantar um outro roteador que possa interconectar essas duas redes. As redes são:&lt;/p&gt;
&lt;p&gt;router0: 10.10.0.0 /16 /
router2: 10.20.0.0 /16&lt;/p&gt;
&lt;p&gt;Iremos então adicionar um terceiro router e iremos chamá-lo de &amp;quot;router1&amp;quot;. Ao efetuar a conexão, com todas as configurações DTE/DCE nas duas pontas devidamente configuradas, ainda obtemos erro de PING de uma ponta a outra. Isso acontece pelo fato de não existir nenhuma rota de &amp;quot;router0&amp;quot; para &amp;quot;router2&amp;quot; e vice-versa.&lt;/p&gt;
&lt;p&gt;Entramos no nosso &amp;quot;router0&amp;quot; em modo config e criamos uma rota estática para &amp;quot;router2&amp;quot; com o comando &amp;quot;iproute&amp;quot;:&lt;/p&gt;
&lt;p&gt;ip route 10.20.0.0 255.255.0.0 10.10.0.1&lt;/p&gt;
&lt;p&gt;Neste contexto o primeiro endereço IP refere-se a rede que se deseja alcançar e o segundo IP é a mascara específica. O último endereço indica o meio em que vamos alcançar nossa rede desejada, ou seja o IP da inteface conectada ao &amp;quot;router1&amp;quot;. Nossa topologia segue então a seguinte figura:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external image-reference" href="/assets/images/esquematico-rota-estatica.jpeg"&gt;&lt;img alt="Image" src="/assets/images/esquematico-rota-estatica.jpeg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Não devemos esquecer de efetuar o mesmo procedimento no &amp;quot;router2&amp;quot;:&lt;/p&gt;
&lt;p&gt;ip route 10.10.0.0 255.255.0.0 10.10.0.2&lt;/p&gt;
&lt;p&gt;Observe que neste caso alteramos o IP do nosso roteador do meio, pois este é o IP que nosso &amp;quot;router2&amp;quot; se conecta ao &amp;quot;router1&amp;quot;. Efetuando o comando PING de uma ponta a outra, podemos verificar que agora temos conexão.&lt;/p&gt;
</content><category term="misc"></category><category term="laboratório"></category><category term="cisco"></category></entry></feed>